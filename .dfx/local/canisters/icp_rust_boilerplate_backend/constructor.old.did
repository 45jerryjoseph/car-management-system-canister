type Car = record {
  id : nat64;
  make: text;
  model: text;
  year: nat32;
  color: text;
  created_at: nat64;
  updated_at: opt nat64;
  owner: text;
  is_booked: bool;
};

type CarPayload = record {
  make: text;
  model: text;
  year: nat32;
  color: text;
  owner: text;
  is_booked: bool;
};

type Customer = record {
  id: nat64;
  name: text;
  contact: text;
};

type Reservation = record {
  car_id: nat64;
  customer_id: nat64;
  reservation_time: nat64;
};

type Error = variant { NotFound: record { msg: text } };

service : {
  add_car: (CarPayload) -> (opt Car);
  delete_car: (nat64) -> (variant { Ok: Car; Err: Error });
  get_car: (nat64) -> (variant { Ok: Car; Err: Error }) query;
  is_booked: (nat64) -> (variant { Ok: bool; Err: Error }) query;
  update_car: (nat64, CarPayload) -> (variant { Ok: Car; Err: Error });
  add_customer: (text, text) -> (opt Customer);
  get_customer: (nat64) -> (variant { Ok: Customer; Err: Error }) query;
  make_reservation: (nat64, nat64) -> (variant { Ok: Reservation; Err: Error });
  get_reservation: (nat64) -> (variant { Ok: Reservation; Err: Error }) query;
  generate_report: () -> (vec Car);
};